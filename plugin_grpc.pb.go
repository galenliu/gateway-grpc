// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gateway_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PluginServerClient is the client API for PluginServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PluginServerClient interface {
	// Sends another greeting
	PluginHandler(ctx context.Context, opts ...grpc.CallOption) (PluginServer_PluginHandlerClient, error)
}

type pluginServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPluginServerClient(cc grpc.ClientConnInterface) PluginServerClient {
	return &pluginServerClient{cc}
}

func (c *pluginServerClient) PluginHandler(ctx context.Context, opts ...grpc.CallOption) (PluginServer_PluginHandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &PluginServer_ServiceDesc.Streams[0], "/grpc.PluginServer/PluginHandler", opts...)
	if err != nil {
		return nil, err
	}
	x := &pluginServerPluginHandlerClient{stream}
	return x, nil
}

type PluginServer_PluginHandlerClient interface {
	Send(*BaseMessage) error
	Recv() (*BaseMessage, error)
	grpc.ClientStream
}

type pluginServerPluginHandlerClient struct {
	grpc.ClientStream
}

func (x *pluginServerPluginHandlerClient) Send(m *BaseMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pluginServerPluginHandlerClient) Recv() (*BaseMessage, error) {
	m := new(BaseMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginServerServer is the server API for PluginServer service.
// All implementations must embed UnimplementedPluginServerServer
// for forward compatibility
type PluginServerServer interface {
	// Sends another greeting
	PluginHandler(PluginServer_PluginHandlerServer) error
	mustEmbedUnimplementedPluginServerServer()
}

// UnimplementedPluginServerServer must be embedded to have forward compatible implementations.
type UnimplementedPluginServerServer struct {
}

func (UnimplementedPluginServerServer) PluginHandler(PluginServer_PluginHandlerServer) error {
	return status.Errorf(codes.Unimplemented, "method PluginHandler not implemented")
}
func (UnimplementedPluginServerServer) mustEmbedUnimplementedPluginServerServer() {}

// UnsafePluginServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PluginServerServer will
// result in compilation errors.
type UnsafePluginServerServer interface {
	mustEmbedUnimplementedPluginServerServer()
}

func RegisterPluginServerServer(s grpc.ServiceRegistrar, srv PluginServerServer) {
	s.RegisterService(&PluginServer_ServiceDesc, srv)
}

func _PluginServer_PluginHandler_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PluginServerServer).PluginHandler(&pluginServerPluginHandlerServer{stream})
}

type PluginServer_PluginHandlerServer interface {
	Send(*BaseMessage) error
	Recv() (*BaseMessage, error)
	grpc.ServerStream
}

type pluginServerPluginHandlerServer struct {
	grpc.ServerStream
}

func (x *pluginServerPluginHandlerServer) Send(m *BaseMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pluginServerPluginHandlerServer) Recv() (*BaseMessage, error) {
	m := new(BaseMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PluginServer_ServiceDesc is the grpc.ServiceDesc for PluginServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PluginServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PluginServer",
	HandlerType: (*PluginServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PluginHandler",
			Handler:       _PluginServer_PluginHandler_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "plugin.proto",
}
